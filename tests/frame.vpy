import vapoursynth as vs
from vapoursynth import core
from bssource import BSSource,Trim, AudioDub,CurrentClip


#https://vapoursynth.com/doc/pythonreference.html#Environment
#env = vs.get_current_environment()
#with env.use():
#    pprint(env)
#    print(env.copy())

input=r'VTS_01_1-00.00.00.000-00.00.17.818.VOB'

#clip=BSSource(input)
BSSource(input)

clip=CurrentClip()
clip.clip_info()

basedir=''


"""
d = core.std.MakeDiff(clip, clip3)
da = core.std.Levels(d, min_in=511, max_in=513, gamma=1, min_out=0, max_out=1023, planes=[0,1,2])
da.set_output()
"""

def copy_property(n, f):
    fout = f[1].copy()
    props = ['_Matrix', '_ChromaLocation', '_Primaries', '_Transfer']
    for prop in props:
        try:
            fout.props[prop] = f[0].props[prop]
        except:
            pass
    return fout

def dump(obj):
  for attr in dir(obj):
    ("obj.%s = %r" % (attr, getattr(obj, attr)))

##https://forum.doom9.org/showthread.php?p=1885855

TRANSFER =     {
                0:'reserved',
                1:'709',
                2:'unspec',
                3:'reserved',
                4:'470m',
                5:'470bg',
                6:'601',
                7:'240m',
                8:'linear',
                9:'log100',
                10:'log316',
                11:'xvycc',
                13:'srgb',
                14:'2020_10',
                15:'2020_12',
                16:'st2084',
                18:'std-b67'
                }                             


MATRIX =      {
                0:'rgb',
                1:'709',
                2:'unspec',
                3:'reserved',
                4:'fcc',
                5:'470bg',
                6:'170m',
                7:'240m',
                8:'ycgco',
                9:'2020ncl',
               10:'2020cl' ,
               12:'chromancl',
               13:'chromacl',
               14:'ictcp'
              }   


PRIMARIES =   {
                1 : '709'    ,
                2 : 'unspec' ,
                4 : '470m'   ,
                5 : '470bg'  ,
                6 : '170m'   ,
                7 : '240m'   ,
                8 : 'film'   ,
                9 : '2020'   ,
               10 : 'st428'  , #'xyz'
               11 : 'st431-2',
               12 : 'st432-1',
               22 : 'jedec-p22'
                }

PROPS = {
            '_ChromaLocation':  {0:'left', 1:'center', 2:'topleft', 3:'top', 4:'bottomleft', 5:'bottom'},
            '_ColorRange':      {0:'full range', 1:'limited range'},
            '_Matrix':           MATRIX    ,
            '_Primaries':        PRIMARIES ,
            '_Transfer':         TRANSFER  ,
            '_FieldBased':      {0:'progressive', 1:'bottom field first', 2:'top field first'},
            '_AbsoluteTime':    {},
            '_DurationNum':     {},
            '_DurationDen':     {},
            '_Combed':          {},    
            '_Field':           {0:'from bottom field, if frame was generated by SeparateFields',
                                  1:'from top field, if frame was generated by SeparateFields'},
            '_PictType':        {},
            '_SARNum':          {},
            '_SARDen':          {},
            '_SceneChangeNext': {0:'nope',1:'LAST FRAME of the current scene'},
            '_SceneChangePrev': {0:'nope',1:'FRAME STARTS a new scene'},
            '_Alpha':           {}
        } 

def get_frame_props(clip, frame):
    '''
    prints all available frame properties (_PictType, _Matrix, _Primaries ...etc.)
    http://www.vapoursynth.com/doc/apireference.html#reserved-frame-properties
    '''

    info = []
    props_dict = dict(clip.get_frame(frame).props)
    for prop, prop_value in props_dict.items():
        if isinstance(prop_value, bytes):
            prop_value = prop_value.decode()
            
        elif isinstance(prop_value, vs.VideoFrame):  #this is a wild guess, did not look into alpha at all yet
            prop_value = 'yes'
            
        info.append('  {: <25}{}'.format(prop, prop_value))
        try:
            info.append('={}'.format(PROPS[prop][prop_value]))
        except:
            pass
        info.append('\n')            
    return ''.join(info)


from pprint import pprint

#http://www.vapoursynth.com/doc/pythonreference.html#raw-access-to-frame-data
#for key, value in clip.get_frame(0).props.items():
#	print(key, '->', value)
def dump_frame_props(f):
    """
    VideoFrame
        	Format: YUV420P8
        	Width: 720
        	Height: 480
        	Readonly: True
    """
    pprint(f.copy())
    props=f.props
    for prop in props:
        #clip.log_info("frame.%s = %r" % (prop, getattr(props, prop)))
        print("frame.%s = %r" % (prop, getattr(props, prop)))

#for frame in clip.frames():
#    # Do stuff with your frame
#    print(frame)
#    pass

#with clip.get_frame(0) as f:
#    dump_frame_props(f)

#from 0 to len-1
#for frame in range(len(clip.videos)):
#  
#for frame in clip.video.frames():
#with clip.video.get_frame(0) as frame:

"""
#[nMin,nMax]
nMin=0
nMax=1
for f in range(nMin,nMax+1):
    # Do stuff with your frame
    frame=clip.video.get_frame(f)
    print(frame)
    
    #format=clip.format()
    #width=clip.width()
    #height=clip.height()
    #f=vs.core.std.BlankClip(color=[25, 50, 60]).get_frame(0) 
    #f=vs.core.create_video_frame(format, width, height)
    #frame=f
    
    for chunk in frame.readchunks():
        with open(basedir+'output'+str(f)+'.raw', 'wb') as file:
            file.write(chunk)
    
#clip.dump()
"""



#AudioDub() if no trim
if __name__ == "__main__":
    
    print(get_frame_props(clip.video, 0))
    
    with clip.video.get_frame(0) as f:
        dump_frame_props(f)
        
    format=clip.format()
    width=clip.width()
    height=clip.height()
    f=vs.core.create_video_frame(format, width, height)
    dump_frame_props(f)
         
    print(clip.duration())
    print(clip.fps())
    print(clip.info())
    
    
   # core.imwri.Write(clip.video, imgformat='JPEG',filename=basedir+'frame_%02d.jpg', firstnum=1,compression_type='JPEG', alpha=None, overwrite=True,quality=100)
    
else:
    AudioDub(clip.video,clip.audio)



